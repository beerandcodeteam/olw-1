name: Deploy to Production

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build artifact
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: Configure PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring, openssl, fileinfo, PDO, bcmath, tonkenizer, xml

      - name: Installing Composer dependencies
        run: |
          composer install --no-dev --no-interaction --prefer-dist

      - name: Compiling assets
        run: |
          npm install
          npm run build

      - name: Generate deployment artifact
        run: tar -czf ${{ github.sha }}.tar.gz --exclude=*.git --exclude=node_modules --exclude=tests *

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz
          retention-days: 1

  prepare-release-on-server:
    name: Prepare release on server
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/download-artifact@v2
        name: Download artifact
        with:
          name: app-build

      - name: Upload to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ github.sha }}.tar.gz
          target: /home/ubuntu/project/artifacts

      - name: Extract archive and config directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ubuntu/project/releases/${{ github.sha }}
            tar -xzf /home/ubuntu/project/artifacts/${{ github.sha }}.tar.gz -C /home/ubuntu/project/releases/${{ github.sha }}
            mkdir -p /home/ubuntu/project/storage/{app,public,framework,logs}
            mkdir -p /home/ubuntu/project/storage/framework/{cache,sessions,testing,views}

  activate-release:
    name: Activate release
    runs-on: ubuntu-latest
    needs: [ prepare-release-on-server ]
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: /home/ubuntu/project/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: /var/www/html/current
          STORAGE_PATH: /home/ubuntu/project/storage
          BASE_PATH: /home/ubuntu/project
          LARAVEL_ENV: ${{ secrets.PROD_LARAVEL_ENV }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV
          script: |
            printf "%s" "$LARAVEL_ENV" > ${BASE_PATH}/.env
            ln -s -n -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -n -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH

  after-hooks:
    name: Run post scripts
    runs-on: ubuntu-latest
    needs: [ activate-release ]
    steps:
      - name: Run scripts
        uses: appleboy/ssh-action@master
        env:
          ACTIVE_RELEASE_PATH: /var/www/html/current
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: ACTIVE_RELEASE_PATH
          script: |
            cd $ACTIVE_RELEASE_PATH
            php artisan migrate
            php artisan config:cache
            php artisan optimize:clear
            echo "Deployed!"

  clean-up:
    name: Clean up release files
    runs-on: ubuntu-latest
    needs: [ activate-release ]
    steps:
      - name: Clean directories
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: /home/ubuntu/project/releases
          ARTIFACT_PATH: /home/ubuntu/project/artifacts
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: RELEASE_PATH,ARTIFACT_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +3 | xargs rm -rf